import '../entities/sync/sync_metadata.dart';
import '../entities/sync/sync_status_info.dart';

/// Интерфейс сервиса синхронизации данных между локальной базой данных и Firestore.
///
/// Определяет основные операции, связанные с процессом синхронизации,
/// мониторингом состояния и управлением процессом.
abstract class ISyncService {
  /// Инициирует полную двустороннюю синхронизацию всех поддерживаемых типов сущностей.
  ///
  /// Сначала отправляет локальные изменения в Firestore, затем получает
  /// удаленные изменения и применяет их локально, разрешая конфликты.
  Future<void> syncAll();

  /// Инициирует синхронизацию только для указанного типа сущностей [entityType].
  Future<void> syncEntityType(EntityType entityType);

  /// Инициирует синхронизацию для конкретной сущности по ее [entityId] и [entityType].
  ///
  /// Полезно для немедленной синхронизации после локального изменения.
  Future<void> syncEntity(String entityId, EntityType entityType);

  /// Получает текущую информацию о состоянии синхронизации.
  ///
  /// Возвращает [SyncStatusInfo], содержащий время последней синхронизации,
  /// статус сети, количество ожидающих изменений и т.д.
  Future<SyncStatusInfo> getSyncStatus();

  /// Возвращает поток [Stream] с обновлениями состояния синхронизации [SyncStatusInfo].
  ///
  /// Позволяет UI реагировать на изменения статуса синхронизации в реальном времени.
  Stream<SyncStatusInfo> getSyncStatusStream();

  /// Запускает прослушивание изменений в удаленном хранилище (Firestore).
  ///
  /// При обнаружении удаленных изменений они будут автоматически обработаны
  /// и применены локально (если включено).
  Future<void> startListeningToRemoteChanges();

  /// Останавливает прослушивание изменений в удаленном хранилище.
  Future<void> stopListeningToRemoteChanges();

  /// Проверяет, есть ли в локальной базе данных изменения, ожидающие синхронизации.
  Future<bool> hasPendingChanges();

  /// Удаляет старые записи метаданных синхронизации из локальной базы.
  ///
  /// Можно указать [olderThan] для удаления записей старше определенного периода.
  /// Если [olderThan] не указан, могут использоваться значения по умолчанию.
  Future<void> cleanupSyncMetadata({Duration? olderThan});

  /// Полностью сбрасывает состояние синхронизации.
  ///
  /// Удаляет все метаданные синхронизации и может потребовать
  /// повторной полной синхронизации при следующем запуске.
  /// Использовать с осторожностью!
  Future<void> resetSyncState();
}