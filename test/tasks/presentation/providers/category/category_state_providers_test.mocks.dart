// Mocks generated by Mockito 5.4.5 from annotations
// in dataroutine6/test/tasks/presentation/providers/category/category_state_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dataroutine6/features/tasks/domain/entities/category/category.dart'
    as _i4;
import 'package:dataroutine6/features/tasks/domain/usecases/category/create.dart'
    as _i5;
import 'package:dataroutine6/features/tasks/domain/usecases/category/delete.dart'
    as _i8;
import 'package:dataroutine6/features/tasks/domain/usecases/category/get_all.dart'
    as _i2;
import 'package:dataroutine6/features/tasks/domain/usecases/category/update.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesUseCase extends _i1.Mock
    implements _i2.GetCategoriesUseCase {
  MockGetCategoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CategoryEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<List<_i4.CategoryEntity>>.value(
              <_i4.CategoryEntity>[],
            ),
          )
          as _i3.Future<List<_i4.CategoryEntity>>);
}

/// A class which mocks [CreateCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateCategoryUseCase extends _i1.Mock
    implements _i5.CreateCategoryUseCase {
  MockCreateCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> call(_i4.CategoryEntity? category) =>
      (super.noSuchMethod(
            Invocation.method(#call, [category]),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#call, [category]),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [UpdateCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCategoryUseCase extends _i1.Mock
    implements _i7.UpdateCategoryUseCase {
  MockUpdateCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(_i4.CategoryEntity? category) =>
      (super.noSuchMethod(
            Invocation.method(#call, [category]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DeleteCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategoryUseCase extends _i1.Mock
    implements _i8.DeleteCategoryUseCase {
  MockDeleteCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
